const express = require('express')
const { createBundleRenderer } = require('vue-server-renderer')
const fs = require('fs')
const path = require('path')
const favicon = require('serve-favicon')
const LRU = require('lru-cache')
const compression = require('compression')

const isProd = process.env.NODE_ENV === 'production'
const resolve = file => path.resolve(__dirname, file)
const templatePath = resolve('./index.template.html')

// Create Express server app
const app = express()

// Vue bundle renderer
let renderer
let errorRenderer
// In development: wait for webpack compilation
// when receiving a SSR request
let readyPromise

const defaultRendererOptions = {
  cache: LRU({
    max: 1000,
    maxAge: 1000 * 60 * 15,
  }),
  runInNewContext: false,
  inject: false,
}

if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const serverBundle = require('./dist/vue-ssr-server-bundle.json')
  const errorBundle = require('./dist/vue-ssr-error-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createBundleRenderer(serverBundle, {
    ...defaultRendererOptions,
    template,
    clientManifest,
  })
  errorRenderer = createBundleRenderer(errorBundle, {
    ...defaultRendererOptions,
    template,
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  const setupDevServer = require('./build/setup-dev-server')
  readyPromise = setupDevServer({
    server: app,
    templatePath,
    onUpdate: ({ serverBundle, errorBundle }, options) => {
      // Re-create the bundle renderer
      renderer = createBundleRenderer(serverBundle, {
        ...defaultRendererOptions,
        ...options,
      })
      errorRenderer = createBundleRenderer(errorBundle, {
        ...defaultRendererOptions,
        template: options.template,
      })
    },
  })
}

// Serve static files
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
})

// Serve static files
app.use(compression({ threshold: 0 }))
app.use(favicon('./public/favicon.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))

// Render the Vue app using the bundle renderer
function renderApp (req, res) {
  res.setHeader('Content-Type', 'text/html')

  const context = {
    req,
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      const code = 500
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)

      // Render Error Page
      res.status(code)
      const errorContext = {
        error: {
          code,
        },
      }
      errorRenderer.renderToString(errorContext, (err, html) => {
        if (err) {
          console.error(`error during error render`)
          console.error(err.stack)
          res.send('500 | Internal Server Error')
        } else {
          res.send(html)
        }
      })
    } else {
      res.status(context.httpCode || 200).send(html)
    }
  })
}

// Process SSR requests
let ssr
if (isProd) {
  ssr = renderApp
} else {
  // In development: wait for webpack compilation
  // when receiving a SSR request
  ssr = (req, res) => {
    readyPromise.then(() => renderApp(req, res)).catch(console.error)
  }
}
app.get('*', ssr)

// Listening
const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`Server started at localhost:${port}`)
})
